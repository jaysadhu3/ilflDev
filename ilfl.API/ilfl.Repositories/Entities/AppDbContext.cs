// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace ilfl.Repositories.Entities;

public partial class AppDbContext : DbContext
{
    public AppDbContext(DbContextOptions<AppDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Ifctcontent> Ifctcontents { get; set; }

    public virtual DbSet<IfpcpageContent> IfpcpageContents { get; set; }

    public virtual DbSet<Ifsssection> Ifsssections { get; set; }

    public virtual DbSet<Ifuluser> Ifulusers { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Ifctcontent>(entity =>
        {
            entity.HasKey(e => e.Ifctid);

            entity.ToTable("IFCTContent");

            entity.Property(e => e.Ifctid).HasColumnName("IFCTId");
            entity.Property(e => e.IfctIfss).HasColumnName("IFCT_IFSS");
            entity.Property(e => e.Ifctdescription)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("IFCTDescription");
            entity.Property(e => e.IfctdisplayName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("IFCTDisplayName");
            entity.Property(e => e.Ifctfile)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("IFCTFile");

            entity.HasOne(d => d.IfctIfssNavigation).WithMany(p => p.Ifctcontents)
                .HasForeignKey(d => d.IfctIfss)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IFCT_IFSS");
        });

        modelBuilder.Entity<IfpcpageContent>(entity =>
        {
            entity.HasKey(e => e.Ifpcid);

            entity.ToTable("IFPCPageContent");

            entity.Property(e => e.Ifpcid).HasColumnName("IFPCId");
            entity.Property(e => e.IfpcContent1)
                .IsUnicode(false)
                .HasColumnName("IFPC_Content_1");
            entity.Property(e => e.IfpcContent2)
                .IsUnicode(false)
                .HasColumnName("IFPC_Content_2");
            entity.Property(e => e.IfpcContent3)
                .IsUnicode(false)
                .HasColumnName("IFPC_Content_3");
            entity.Property(e => e.IfpcContent4)
                .IsUnicode(false)
                .HasColumnName("IFPC_Content_4");
            entity.Property(e => e.IfpcContent5)
                .IsUnicode(false)
                .HasColumnName("IFPC_Content_5");
            entity.Property(e => e.IfpcContent6)
                .IsUnicode(false)
                .HasColumnName("IFPC_Content_6");
            entity.Property(e => e.IfpcContent7)
                .IsUnicode(false)
                .HasColumnName("IFPC_Content_7");
            entity.Property(e => e.IfpcIfssid).HasColumnName("IFPC_IFSSId");

            entity.HasOne(d => d.IfpcIfss).WithMany(p => p.IfpcpageContents)
                .HasForeignKey(d => d.IfpcIfssid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IFPCPageContent_IFPCPageContent");
        });

        modelBuilder.Entity<Ifsssection>(entity =>
        {
            entity.HasKey(e => e.Ifssid);

            entity.ToTable("IFSSSection");

            entity.Property(e => e.Ifssid).HasColumnName("IFSSId");
            entity.Property(e => e.IfssisPageEditable)
                .HasDefaultValue(false)
                .HasColumnName("IFSSIsPageEditable");
            entity.Property(e => e.Ifssname)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("IFSSName");
            entity.Property(e => e.Ifssparent).HasColumnName("IFSSParent");
            entity.Property(e => e.Ifsspath)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("IFSSPath");
        });

        modelBuilder.Entity<Ifuluser>(entity =>
        {
            entity.HasKey(e => e.Ifulid);

            entity.ToTable("IFULUsers");

            entity.Property(e => e.Ifulid).HasColumnName("IFULId");
            entity.Property(e => e.Ifulpassword)
                .IsRequired()
                .HasMaxLength(150)
                .HasColumnName("IFULPassword");
            entity.Property(e => e.Ifulusername)
                .IsRequired()
                .HasMaxLength(150)
                .HasColumnName("IFULUsername");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}